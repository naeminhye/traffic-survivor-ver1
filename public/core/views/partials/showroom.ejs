<style>
#showroom {
  background-color: transparent;
}

.showroom-container {
  position: relative;
  width: 100%;
  background-color: blue;
}
</style>
<div class="showroom-container">
    <div id="showroom">
    </div>
    <div class="menu-container" id="main-menu">
        <div>
            <button id="start-btn" style="margin-bottom: 10px; width: 100%;" class="clip">Bắt đầu</button>
        </div>
        <div>
            <button onclick="location.href = '/options'" style="margin-bottom: 10px; width: 100%;" class="clip">Cài đặt</button>
        </div>
        <div>
            <button onclick="location.href = '/instruction'" style="width: 100%;" class="clip">Hướng dẫn</button>
        </div>
    </div>
</div>

<% include ../partials/game-libs %>
<script>
    var camera, scene, renderer, geometry, material, mesh, controls, loader;

    init();
    animate();

    function init() {

        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0x5171a5 );

        camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
        // camera.position.z = 500;
        // camera.lookAt(scene.position);
        scene.add(camera);
        camera.position.set(0,150,400);
        camera.lookAt(scene.position);	
        
        loader = new THREE.ObjectLoader();
        var bike = loader.load("/models/fbx/bike/bike.json", ( obj ) => {
            obj.traverse((child) => {

                if (child instanceof THREE.Mesh) {
                    child.castShadow = true;
                    child.receiveShadow = true;
                    var texture = new THREE.TextureLoader().load("/models/fbx/bike/bike-uvmap.png");
                    var material = new THREE.MeshBasicMaterial({
                        map: texture,
                        side: THREE.DoubleSide
                    });  
                    child.material = material;
                    child.scale.set(20,20,20);
                    // child.position.y = -50;
                    child.position.set(-150, -50, 0);
                    mesh = child;
                    scene.add(mesh);
                }
            });
        });
        
        var ambientLight = new THREE.AmbientLight(0x111111);
        scene.add(ambientLight);
    
        renderer = new THREE.WebGLRenderer({
            antialias: true
        });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        // CONTROLS
        // controls = new THREE.OrbitControls( camera, renderer.domElement );

        window.addEventListener( 'resize', onWindowResize, false );

        document.getElementById("showroom").appendChild(renderer.domElement);

    }

    function animate() {

        requestAnimationFrame(animate);
        render();

    }

    function render() {

        if(mesh) {
            mesh.rotation.y += 0.005;
        }

        renderer.render(scene, camera);

    }

    function onWindowResize(){

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }
</script>