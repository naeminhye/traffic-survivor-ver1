

<script type="text/javascript" src='core/libs/three.js/92/three.min.js'></script>
<script type="text/javascript" src='core/libs/cannon/cannon.min.js'></script>
<script type="text/javascript" src='core/libs/Projector.js'></script>
<script type="text/javascript" src='core/libs/Detector.js'></script>
<script type="text/javascript" src='core/libs/Reflector.js'></script>
<script type="text/javascript" src='core/libs/Cloth.js'></script>
<script type="text/javascript" src='core/libs/inflate.min.js'></script>
<script type="text/javascript" src='core/libs/loaders/DDSLoader.js'></script>
<script type="text/javascript" src='core/libs/loaders/MTLLoader.js'></script>
<script type="text/javascript" src='core/libs/loaders/OBJLoader.js'></script>
<script type="text/javascript" src='core/libs/loaders/FBXLoader.js'></script>
<script type="text/javascript" src="core/libs/loaders/GLTFLoader.js"></script>
<!--<script type="text/javascript" src="core/libs/GLTFLoader.js"></script> -->
<!-- <script type="text/javascript" src="../../libs/loaders/GLTF2Loader.js"></script> -->
<script type="text/javascript" src="core/libs/loaders/TDSLoader.js"></script>
<script type="text/javascript" src="core/libs/threex/threex.cubecamera.js"></script>
<script type="text/javascript" src="core/libs/WebVR.js"></script>
<script type="x-shader/x-fragment" id="fragmentShaderDepth">

    uniform sampler2D texture;
    varying vec2 vUV;

    vec4 pack_depth( const in float depth ) {

        const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );
        const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );
        vec4 res = fract( depth * bit_shift );
        res -= res.xxyz * bit_mask;
        return res;

    }

    void main() {

        vec4 pixel = texture2D( texture, vUV );

        if ( pixel.a < 0.5 ) discard;

        gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );

    }
</script>

<script type="x-shader/x-vertex" id="vertexShaderDepth">

    varying vec2 vUV;

    void main() {

        vUV = 0.75 * uv;

        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

        gl_Position = projectionMatrix * mvPosition;

    }

</script>